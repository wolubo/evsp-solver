* Lösungsverfahren festlegen
* sa: Simulated Annealing
* aco: Ant Colony Optimization
solver=aco
*solver=sa

* Plattform für die Suche nach der besten Lösung festlegen.
*plattform=gpu
plattform=cpu

* Anzahl der Threads festlegen oder limitieren.
MinNumOfThreads=1
*MaxNumOfThreads=1
ThreadFactor=5

* (Zwischen-) Lösungen prüfen, um etwaige Programmfehler entdecken zu können
*perform_checks=true
perform_checks=false

* Laufzeiten ausgeben
*stopwatch=true
stopwatch=false

* VERBOSE-Mode
* Der Verbose-Mode dient zum Debuggen der Anwendung. Ist er aktiv, werden auf der Konsole umfangreiche Daten zum 
* Programmablauf ausgegeben. Ausserdem wird im CPU-Mode die Anzahl der Threads auf 1 begrenzt. 
verbose=false
*verbose=true

* Ladestationen
* Definiert, nach welchem Verfahren die Ladestationen festgelegt werden.
* no_charging_stations: 	Es wird ein VSP für konventionelle Fahrzeuge gelöst. Keine Ladestationen & unbegrenzte Batteriekapazität.
* random_stops:				Zufällig ausgewählte Haltestellen werden zu Ladestationen (prozentualer Anteil: charging_station_ratio).
* veh_capacity_at_stops: 	Jede Haltestelle mit einer VehCapacityForCharging > 0 wird zu Ladestation.
* veh_type_entry:			Jede Haltestelle mit einem Eintrag im Block VEHTYPETOCHARGINGSTATION wird zu Ladestation.
*charging_station_detection_mode=no_charging_stations
charging_station_detection_mode=random_stops
*charging_station_detection_mode=veh_capacity_at_stops
*charging_station_detection_mode=veh_type_entry

* Anteil der Ladestationen
* Prozentualer Anteil von Ladestationen an der Gesamtanzahl der Bushaltestellen im Bereich 0-100. Nur relevant, wenn 
* 'charging_station_detection_mode' gleich 'random' ist. Default: 10%
*   0: Über die Depots hinaus gibt es keine Ladestationen.
* 100: Jede Bushaltestelle ist auch eine Ladestation.
charging_station_ratio=15

* Verbindungsfahrten überprüfen
* Die Input-Datei enthält möglicherweise Verbindungsfahrten, deren Dauer oder Laufzeit mit 0 angegeben ist. Wenn 'check_emtpy_trips'
* gleich 'true' ist wird dies überprüft und falls nötig werden die Dauer bzw. die Laufzeit mit Durchschnittswerden überschrieben.
check_emtpy_trips=true

* Servicefahrten überprüfen
* Die Input-Datei enthält möglicherweise nicht für alle Haltestellen, an denen Servicefahrten enden eine Verbindungsfahrt zu einem
* in der Input-Datei definierten Depot. Wenn 'check_service_trips' gleich 'true' ist wird dies überprüft und falls nötig werden
* neue Verbindungsfahrten erzeugt, die die Haltestellen der betroffenen Servicefahrten mit Depots verbinden.
check_service_trips=true

* Kriterien für das Terminieren der Suche nach Lösungen
* Trift eines der Kriterien zu wird die Suche beendet.
* terminate_on_keystroke: Ein Tastendruck bricht die Suche ab (Default: false)
* terminate_after_time: Die Suche endet spätestens nach der hier angegebenen Anzahl von Sekunden (0=kein Abbruch; Default: 1000).
* terminate_after_rounds: Die Suche endet spätestens nach der hier angegebenen Anzahl von Runden (0=kein Abbruch; Default: 1000).
terminate_on_keystroke=true
terminate_after_time=10800
terminate_after_rounds=0

* Statistische Angaben auf der Konsole ausgeben (Entscheidungsnetz, Startlösung, ...)
*sa.print_stats=true
*sa.print_stats=false
aco.print_stats=true
*aco.print_stats=false

* Entscheidungsnetz auf der Konsole ausgeben (nur bei sehr kleinen Problemen sinnvoll).
aco.dump_decision_net=false

* Beste Lösung ausgeben
aco.dump_best_solution=false

* Schlechteste Lösung ausgeben
aco.dump_worst_solution=false

* Kantengewichte normalisieren, wenn eine neue beste Lösung gefunden wurde?
aco.normalizeEdgeWeights=true

* Beste Lösung in neue Generation übernehmen?
aco.keepBestSolution=false

* Faktoren für die Berechnung der Kantengewichte beim Verfahren ACO:
AcoQualifiers.InitialWeight=5,0
AcoQualifiers.fading=0,05
AcoQualifiers.TotalCostQualifier=1,0
AcoQualifiers.NumberOfVehiclesQualifier=0,0
AcoQualifiers.CircCostRatioQualifier=0,0
AcoQualifiers.WeakenAllBadSolutions=1,2

* Parameter für das Verfahren "Simulated Annealing":
SA.Params.GreedyCreation=true
SA.Params.StartTemperature=5000
SA.Params.MinTemperature=10
SA.Params.CoolingRate=0,005
SA.Params.CrossoverRate=0,02
*SA.Params.CrossoverUpperBound=1
SA.Params.GreedyInsertion=0,1
SA.Params.InsertionRate=0,05
*SA.Params.InsertionUpperBound=1
SA.Params.DeletionRate=0,07
*SA.Params.DeletionsLowerBound=1
*SA.Params.DeletionsUpperBound=1
SA.Params.GreedyInsertionAfterDeletion=0,1
SA.Params.CrossoverChance=1,0
SA.Params.InsertionChance=0,7
SA.Params.CircCostDeletionChance=0,3
SA.Params.NumOfServiceTripsDeletionChance=0,4
SA.Params.RandomDeletionChance=0,1

*recent_file = data |TEST_10_SF_207_stoppoints|txt|01.01.2016
*recent_file = data |TEST_40_SF_207_stoppoints|txt|01.01.2016
*recent_file = data |TEST_200_SF_207_stoppoints|txt|01.01.2016
*recent_file = data |TEST_400_SF_207_stoppoints|txt|01.01.2016
recent_file = data |Lackner_Set1|txt|01.01.2016
*recent_file = data |sample_simple_867_SF_207_stoppoints|txt|01.01.2016
recent_file = data |sample_real_867_SF_207_stoppoints|txt|01.01.2016
recent_file = data |sample_lowcap_867_SF_207_stoppoints|txt|01.01.2016
recent_file = data |sample_real_2633_SF_67_stoppoints|txt|01.01.2016
recent_file = data |sample_real_10710_SF_140_stoppoints|txt|01.01.2016

streetfile = data\\strassen_osm.txt